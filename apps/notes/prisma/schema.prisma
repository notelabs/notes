// Schema for an identity service for a SaaS
// This service tracks existing users & their accounts, as well as invites for users who haven't joined yet

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["dataproxy"]
}

datasource db {
    provider          = "postgresql"
    url               = env("DB_URL")
    shadowDatabaseUrl = env("SHADOW_URL")
}

model Subscription {
    id                   String   @id @default(cuid())
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt()
    stripeCustomerId     String
    stripeSubscriptionId String
    accountId            String
    account              Account  @relation(fields: [accountId], references: [id])
}

model Account {
    id                String         @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?        @db.Text
    access_token      String?        @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?        @db.Text
    session_state     String?
    createdAt         DateTime       @default(now())
    updatedAt         DateTime       @updatedAt
    referrer          String?
    invites           Invite[]
    subscriptions     Subscription[]

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    documents     Document[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Invite {
    id        String   @id @default(cuid())
    dateSent  DateTime @default(now())
    email     String
    accountId String?
    account   Account? @relation(fields: [accountId], references: [id])
}

model Document {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    title     String   @default("Untitled")
    summary   String   @default("This document has no summary.")
    content   String   @default("Write something amazing.")
    owner     String
    user      User     @relation(fields: [owner], references: [id])
}
